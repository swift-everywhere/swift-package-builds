name: buildbot
on:
  workflow_dispatch:
  schedule:
    - cron: '5 * * * *'
  push:
    branches: [main]
    paths:
      - '.github/workflows/builbot.yml'


permissions:
  # Give the default GITHUB_TOKEN write permission to commit and push the
  # added or changed files to the repository.
  contents: write

concurrency:
  group: builtbot
  #-${{ github.ref }}
  cancel-in-progress: true

jobs:
  buildbot:
    runs-on: ${{ matrix.os }}
    strategy: 
      fail-fast: false
      matrix:
        #os: ['ubuntu-24.04', 'ubuntu-22.04', 'macos-14', 'macos-15', 'windows-latest']
        # TODO: Windows (needs bash support)
        #os: ['ubuntu-24.04', 'ubuntu-22.04', 'macos-14', 'macos-15']
        # TODO: fix ios builds
        #os: ['ubuntu-24.04', 'ubuntu-22.04']
        # TODO: fix issue with commit collisions when running concurrently
        os: ['ubuntu-24.04']
    steps:
      - name: Setup Android Toolchain
        if: ${{ matrix.os == 'ubuntu-24.04' }}
        id: setup-toolchain-android
        uses: skiptools/swift-android-action@main
        with:
          # just set up the toolchain and don't build anything
          build-package: false

      - name: Setup Windows Toolchain
        if: ${{ matrix.os == 'windows-latest' }}
        id: setup-toolchain-windows
        uses: compnerd/gha-setup-swift@main
        with:
          branch: swift-6.0.2-release
          tag: 6.0.2-RELEASE

      - name: Setup Toolchain
        id: setup-platform
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == 'ubuntu-24.04' ]; then
            echo 'platform=android' >> $GITHUB_OUTPUT
            echo 'buildcmd=${{ steps.setup-toolchain-android.outputs.swift-build }}' >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == 'ubuntu-22.04' ]; then
            echo 'platform=linux' >> $GITHUB_OUTPUT
            echo 'buildcmd=swift build' >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == 'windows-latest' ]; then
            echo 'platform=windows' >> $GITHUB_OUTPUT
            echo 'buildcmd=swift build' >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == 'macos-14' ]; then
            echo 'platform=macos' >> $GITHUB_OUTPUT
            echo 'buildcmd=swift build' >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == 'macos-15' ]; then
            echo 'platform=ios' >> $GITHUB_OUTPUT
            echo 'DEVELOPER_DIR=/Applications/Xcode-16.2.0.app xcrun xcodebuild -skipMacroValidation -skipPackagePluginValidation -derivedDataPath .derivedData build -destination generic/platform=iOS -scheme $(xcrun xcodebuild -list -json | jq -r ".workspace.schemes | sort_by(.) | reverse | .[0]")' >> $GITHUB_OUTPUT
          else
            echo "::error::Unsupported platform: ${{ matrix.os }}"
            exit 1
          fi

      - name: Clone
        uses: actions/checkout@v4
        with:
          path: swift-android-builds

      - name: Configure git push
        shell: bash
        working-directory: swift-android-builds
        run: |
          # git config so we can push to the repository
          git config user.email "github-action@users.noreply.github.com"
          git config user.name "GitHub Action"
          git config user.password "${{ secrets.GITHUB_TOKEN }}"

      - name: Build packages for ${{ steps.setup-platform.outputs.platform }}
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          #set -x
          set -o pipefail
          PLATFORM="${{ steps.setup-platform.outputs.platform }}"
          PACKAGES="swift-android-builds/index/packages.json"
          INDEX="swift-android-builds/index/${PLATFORM}.json"
          ls "${INDEX}"
          echo "Packages in ${INDEX}: "$(jq 'length' ${INDEX})
          mkdir repositories
          mkdir logs

          BUILD_START=`date +%s`
          BUILD_SUCCESS=0
          BUILD_FAILURE=0
          FAILURES=0

          echo "Status | Repository | Duration | Stars" >> $GITHUB_STEP_SUMMARY
          echo "--- | --- | --- | ---" >> $GITHUB_STEP_SUMMARY

          for DIR in $(cat ${PACKAGES} | jq -r '.[]' | sort -R) ; do
            BUILD_NOW=`date +%s`

            # since this workflow runs every hour, stop after we have been
            # running for 45 minutes
            BUILD_DURATION=$[BUILD_NOW - BUILD_START]
            if [ ${BUILD_DURATION} -gt $[60 * 45] ]; then
              echo "Stopping after BUILD_DURATION: ${BUILD_DURATION}"
              if [ ${FAILURES} -gt 0 ]; then
                echo "::error::Failing build due to regressions"
                exit 1
              fi
              break
            fi

            REPO="https://github.com/${DIR}.git"

            if [ "${DIR}" == "keyvariable/kvSIMD.swift" ]; then
              echo "Skipping build of ${REPO} due to known hang"
              continue
            fi

            echo "Building: ${REPO} (https://swiftpackageindex.com/${DIR})"

            # skip a build that we have already run 
            #jq -e --arg DIR "$DIR" '.[$DIR]."stars"' ${INDEX} && continue || true

            mkdir -p logs/"${DIR}"

            # reset from previous run
            EXITCODE=0

            WD=$(pwd)
            START=$(date +%s)
            echo "Running build command: '${{ steps.setup-platform.outputs.buildcmd }}'"
            (git clone --depth=1 "${REPO}" repositories/"${DIR}" && cd repositories/"${DIR}" && ${{ steps.setup-platform.outputs.buildcmd }} ) | tee logs/"${DIR}"/buildlog.txt && echo EXITCODE=0 || EXITCODE=$?
            END=$(date +%s)
            DURATION=$[END - START]
            cd ${WD}

            if [ $EXITCODE == 0 ]; then
              echo "SUCCESS: ${REPO} in ${DURATION}"
              STATUS="success"
              STATUS_ICON="✅"
              BUILD_SUCCESS=$[BUILD_SUCCESS + 1]
            else
              echo "FAILED: ${REPO} ($EXITCODE) in ${DURATION}"
              STATUS="failure"
              STATUS_ICON="❌"
              BUILD_FAILURE=$[BUILD_FAILURE + 1]
            fi

            STARS=$(gh repo view --json stargazerCount "${REPO}" | jq '.stargazerCount')

            echo "$STATUS_ICON $STATUS | [$DIR]($REPO) | $DURATION | $STARS" >> $GITHUB_STEP_SUMMARY

            # clean out the repository after building
            rm -rf repositories/"${DIR}"

            # fetch any changes that may have occured since we last updated
            git -C $(dirname ${INDEX}) pull

            # create a record of the package if it doesn't already exist
            jq --arg DIR "$DIR" --arg REPO "$REPO" '.[$DIR] |= if . == null then {"repo": $REPO, "status": "unknown", "created": (now | todate)} else . end' $INDEX > $INDEX.new && mv ${INDEX}.new ${INDEX}

            LAST_STATUS=$(jq -r --arg DIR "$DIR" '.[$DIR]."status"' ${INDEX})

            # only update the document if the build status has changed,
            # since otherwise we have a massive number of commits
            if [ "${LAST_STATUS}" = "${STATUS}" ]; then
              echo "Build status (${STATUS}) for ${REPO} matches previous run; not updating ${INDEX}"
              continue
            else
              # update the status of the build
              jq --arg DIR "$DIR" --arg STATUS "$STATUS" '.[$DIR]."status" = $STATUS' $INDEX > $INDEX.new && mv $INDEX.new $INDEX

              # check for regressions
              if [ "${LAST_STATUS}" = "success" ] && [ "${STATUS}" = "failure" ]; then
                echo "::error::Status for ${REPO} changed from success to failure"
                FAILURES=$[FAILURES + 1]
              fi
            fi

            # set the build time
            jq --arg DIR "$DIR" --arg REPO "$REPO" '.[$DIR]."modified" = (now | todate)' $INDEX > $INDEX.new && mv $INDEX.new $INDEX
            # save the runid to refer to build logs
            jq --arg DIR "$DIR" --arg RUNID "${{ github.run_id }}" '.[$DIR]."runid" = ($RUNID | tonumber)' $INDEX > $INDEX.new && mv $INDEX.new $INDEX
            # save the build duration
            jq --arg DIR "$DIR" --arg DURATION "$DURATION" '.[$DIR]."duration" = ($DURATION | tonumber)' $INDEX > $INDEX.new && mv $INDEX.new $INDEX
            # save the number of stars
            jq --arg DIR "$DIR" --arg STARS "$STARS" '.[$DIR]."stars" = ($STARS | tonumber)' $INDEX > $INDEX.new && mv $INDEX.new $INDEX

            # we could compact the JSON, but it is nice to be able to
            # see the line-by-line commit history when a package
            # has been added or updated
            #jq --compact-output --sort-keys '.' $INDEX > $INDEX.new && mv $INDEX.new $INDEX
            # ensure keys are sorted
            jq --sort-keys '.' $INDEX > $INDEX.new && mv $INDEX.new $INDEX

            # output the JSON for debugging
            #jq --color-output --sort-keys '.' $INDEX

            cd $(dirname ${INDEX})

            git diff $(basename $INDEX)
            git add $(basename $INDEX)
            git commit -m "${PLATFORM} $STATUS for $REPO" .
            # permit collisions; we will commit the next time around
            git push || true
            cd -
          done

          # output the ending summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "$[BUILD_SUCCESS + BUILD_FAILURE] builds: $BUILD_SUCCESS success, $BUILD_FAILURE failed" >> $GITHUB_STEP_SUMMARY



